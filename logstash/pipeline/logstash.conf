input {
	tcp {
		port => 5000
	}
	beats{
		port => 5001
		type => "logs"
	}
	log4j {
		mode => "server"
		port => 5002
	}
}

## Add your filters / logstash plugins configuration here
filter {
#   json {
#       source => "message"
#   } 
	# log4j Log
	if [type] == "log4j" {
		grok {
			match => { "message" => "%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:log_level} %{GREEDYDATA:body}" }
		}
		date {
		  match => ["logdate", "yyyy-MM-dd HH:mm:ss,SSS", "ISO8601"]
		}
	}

	# WebSphere Log
	if [type] == "websphere" {
		grok {
			match => { "message" => "\[%{DATE_US:date} %{TIME:time} %{WORD:timezone}\] %{WORD:thread} *%{WORD:class}* *%{WORD:log_level}* %{GREEDYDATA:body}" }
		}
	}

	# Apache Access Log
	if [type] == "apache_access_log" {
		grok {
			match => { "message" => "%{IP:client_ip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:apache_timestamp}\] \"%{WORD:method} /%{NOTSPACE:request_page} HTTP/%{NUMBER:http_version}\" %{NUMBER:server_response}" }
		}
	}

	# Apache Error Log
	if [type] == "apache_error_log" {
		grok {
			match => { "message" => "%{IP:client_ip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:apache_timestamp}\] \"%{WORD:method} /%{NOTSPACE:request_page} HTTP/%{NUMBER:http_version}\" %{NUMBER:server_response}" }
		}
	}
	# IIS Log
	if [type] == "iis_log" {
		grok {
			match => { "message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{IPORHOST:site} %{WORD:method} %{URIPATH:page}%{NOTSPACE:querystring} . %{NUMBER:port} . %{IPORHOST:clienthost} %{NOTSPACE:useragent} %{NOTSPACE:referer} %{NUMBER:response} %{NUMBER:subresponse} %{NUMBER:scstatus}" }
		}
	}
	# IIS WebSphere Plugin Log
	if [type] == "iis_websphere_plugin_log" {
		grok {
			match => { "message" => "%{MONTH} +%{MONTHDAY} %{TIME} %{YEAR}] %{WORD:thread} %{WORD:thread2} - %{WORD:log_level}: %{GREEDYDATA:body}" }
		}
	}

	# Strip leading and trailing whitespace from the body field.
	mutate {
		strip => ["body"]
	}

	# Convert WebSphere log_level text
	if [log_level] == "E" {
		mutate {
			update => { "log_level" => "ERROR" }
		}
	} else if [log_level] == "W" {
		mutate {
			update => { "log_level" => "WARN" }
		}
	} else if [log_level] == "I" {
		mutate {
			update => { "log_level" => "INFO" }
		}
	} else if [log_level] == "D" {
		mutate {
			update => { "log_level" => "DEBUG" }
		}
	}

	# Nothing will pass this filter until there is a new log4j timestamp allowing multiline messages.
#	multiline {
#		pattern => "^\d{4}-\d{2}-\d{2}|^\[|%{IP:client_ip}"
#		negate => true
#		what => "previous"
#	}

} 

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
	}
#	stdout { codec => rubydebug }
}
